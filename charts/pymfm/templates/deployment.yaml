apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pymfm.fullname" . }}
  labels:
    {{- include "pymfm.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "pymfm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "pymfm.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "pymfm.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      restartPolicy: Always
      volumes:
        - name: tmp
          emptyDir: {}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              # Give a proper end-point where the service can be check against. / is template only.
              path: /health
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            httpGet:
              # Give a proper end-point where the service can be check against. / is template only.
              path: /health
              port: 8000
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: BALANCING_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{.Values.auth.apiSecretName}}
                  key: {{.Values.auth.apiUserNameKey}}
            - name: BALANCING_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{.Values.auth.apiSecretName}}
                  key: {{.Values.auth.apiPasswordKey}}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{.Values.redis.auth.existingSecret}}
                  key: {{.Values.redis.auth.existingSecretPasswordKey}}
            - name: REDIS_HOST
              value: pymfm-redis-master
          volumeMounts:
            - mountPath: /tmp
              name: tmp
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
